package com.s8.io.bohr.lithium.branches;

import static com.s8.api.bohr.BOHR_Keywords.CLOSE_JUMP;
import static com.s8.api.bohr.BOHR_Keywords.DEFINE_JUMP_COMMENT;
import static com.s8.api.bohr.BOHR_Keywords.DEFINE_JUMP_TIMESTAMP;
import static com.s8.api.bohr.BOHR_Keywords.OPEN_JUMP;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.s8.api.bytes.ByteOutflow;
import com.s8.api.exceptions.S8IOException;
import com.s8.io.bohr.lithium.object.LiObjectDelta;
import com.s8.io.bohr.lithium.type.BuildScope;


/**
 * 
 *
 * @author Pierre Convert
 * Copyright (C) 2022, Pierre Convert. All rights reserved.
 * 
 */
public class LiGraphDelta {




	/**
	 * Mandatriy version
	 */
	public long targetVersion;


	/**
	 * the revision generated by applying this delta to previous rev
	 */
	private boolean hasTimestamp;

	/**
	 * 
	 */
	private long timestamp;


	/**
	 * 
	 */
	private boolean hasComment;

	/**
	 * 
	 */
	private String comment;


	/**
	 * 
	 */
	public final List<LiObjectDelta> objectDeltas = new ArrayList<>();


	/**
	 * 
	 */
	public long lastAssignedIndex = -1;


	/**
	 * 
	 */
	public LiGraphDelta(long version) {
		super();
		this.targetVersion = version;
	}

	
	
	public void setComment(String comment) {
		this.hasComment = true;
		this.comment = comment;
	}
	
	
	public void setTimestamp(long timestamp) {
		this.hasTimestamp = true;
		this.setTimestamp(timestamp);
	}

	/**
	 * 
	 * @param delta
	 */
	public void appendObjectDelta(LiObjectDelta delta) {
		objectDeltas.add(delta);
	}



	/**
	 * 
	 * @param graph
	 * @throws NdIOException
	 */
	public void operate(LiGraph branch) throws S8IOException {
		/* check version */
		if(targetVersion != (branch.version + 1)) { 
			throw new S8IOException("Mismatch in versions");
		}
		
		BuildScope scope = branch.createBuildScope();
		for(LiObjectDelta objectDelta : objectDeltas) { 
			objectDelta.operate(branch, scope); 
		}
		scope.process();
		
		/* increment version of graph */
		branch.version++;
	}




	public void serialize(LiOutbound outbound, ByteOutflow outflow) throws IOException {

		outflow.putUInt8(OPEN_JUMP);
		
		outflow.putUInt64(targetVersion);
		
		
		if(hasTimestamp) {
			outflow.putUInt8(DEFINE_JUMP_TIMESTAMP);
			outflow.putUInt64(timestamp);
		}
		
		if(hasComment) {
			outflow.putUInt8(DEFINE_JUMP_COMMENT);
			outflow.putStringUTF8(comment);
		}

		// compose common database
		//codebaseIO.compose(outflow, false);
		for(LiObjectDelta objectDelta : objectDeltas) { 
		
			
			objectDelta.serialize(outbound, outflow); 
		}


		outflow.putUInt8(CLOSE_JUMP);
	}

}